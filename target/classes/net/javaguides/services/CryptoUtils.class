// Source code is decompiled from a .class file using FernFlower decompiler.
package net.javaguides.services;

import java.nio.charset.StandardCharsets;
import java.security.DigestException;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class CryptoUtils {
   private static Logger logger = LogManager.getLogger(CryptoUtils.class);
   public static String keyGenerationSeed = null;
   public static String keyGenerationSeedCustom = "AlphaMangus#654321@98765";

   public CryptoUtils() {
   }

   public static String asHex(byte[] buf) {
      StringBuffer strbuf = new StringBuffer(buf.length * 2);

      for(int i = 0; i < buf.length; ++i) {
         if ((buf[i] & 255) < 16) {
            strbuf.append("0");
         }

         strbuf.append(Long.toString((long)(buf[i] & 255), 16));
      }

      return strbuf.toString().toUpperCase();
   }

   public static byte[] hexToBytes(String hexString) {
      char[] hex = hexString.toCharArray();
      int length = hex.length / 2;
      byte[] raw = new byte[length];

      for(int i = 0; i < length; ++i) {
         int high = Character.digit(hex[i * 2], 16);
         int low = Character.digit(hex[i * 2 + 1], 16);
         int value = high << 4 | low;
         if (value > 127) {
            value -= 256;
         }

         raw[i] = (byte)value;
      }

      return raw;
   }

   public static String encrypt(String message, String key) {
      if (message == null) {
         return message;
      } else {
         SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), "AES");
         byte[] encrypted = null;

         try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(1, skeySpec);
            encrypted = cipher.doFinal(message.getBytes("UTF-8"));
         } catch (Exception var5) {
            logger.error("Error found...", var5);
         }

         return asHex(encrypted);
      }
   }

   public static String decrypt(String codedMessage, String key) {
      if (codedMessage == null) {
         return codedMessage;
      } else {
         String originalString = null;

         try {
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(2, skeySpec);
            byte[] original = cipher.doFinal(hexToBytes(codedMessage));
            originalString = new String(original, "UTF-8");
         } catch (Exception var6) {
            logger.error("Error found...", var6);
         }

         return originalString;
      }
   }

   public static void main(String[] args) throws Exception {
      keyGenerationSeed = "AlphaMango654321";
      String message = "SampleEncryption";
      String enc = encrypt(message, keyGenerationSeed);
      String dec = decrypt(enc, keyGenerationSeed);
      String var10001 = keyGenerationSeed;
      System.out.println("key: " + var10001 + " len: " + keyGenerationSeed.length());
      System.out.println("Encypted one: " + enc);
      System.out.println("Decypted one: " + dec);
   }

   public static String getKeyGenerationSeed() {
      return keyGenerationSeed;
   }

   public static void setKeyGenerationSeed(String keyGenerationSeed) {
      CryptoUtils.keyGenerationSeed = keyGenerationSeed;
   }

   public static String decryptCryptoJS(String encryptPassword, String keyStr) {
      try {
         byte[] cipherData = Base64.getDecoder().decode(encryptPassword);
         byte[] saltData = Arrays.copyOfRange(cipherData, 8, 16);
         MessageDigest md5 = MessageDigest.getInstance("MD5");
         byte[][] keyAndIV = GenerateKeyAndIV(32, 16, 1, saltData, keyStr.getBytes(StandardCharsets.UTF_8), md5);
         SecretKeySpec key = new SecretKeySpec(keyAndIV[0], "AES");
         IvParameterSpec iv = new IvParameterSpec(keyAndIV[1]);
         byte[] encrypted = Arrays.copyOfRange(cipherData, 16, cipherData.length);
         Cipher aesCBC = Cipher.getInstance("AES/CBC/PKCS5Padding");
         aesCBC.init(2, key, iv);
         byte[] decryptedData = aesCBC.doFinal(encrypted);
         return new String(decryptedData, StandardCharsets.UTF_8);
      } catch (Exception var11) {
         var11.printStackTrace();
         return null;
      }
   }

   private static byte[][] GenerateKeyAndIV(int keyLength, int ivLength, int iterations, byte[] salt, byte[] password, MessageDigest md) {
      int digestLength = md.getDigestLength();
      int requiredLength = (keyLength + ivLength + digestLength - 1) / digestLength * digestLength;
      byte[] generatedData = new byte[requiredLength];
      int generatedLength = 0;

      try {
         md.reset();

         while(generatedLength < keyLength + ivLength) {
            if (generatedLength > 0) {
               md.update(generatedData, generatedLength - digestLength, digestLength);
            }

            md.update(password);
            if (salt != null) {
               md.update(salt, 0, 8);
            }

            md.digest(generatedData, generatedLength, digestLength);

            for(int i = 1; i < iterations; ++i) {
               md.update(generatedData, generatedLength, digestLength);
               md.digest(generatedData, generatedLength, digestLength);
            }

            generatedLength += digestLength;
         }

         byte[][] result = new byte[][]{Arrays.copyOfRange(generatedData, 0, keyLength), null};
         if (ivLength > 0) {
            result[1] = Arrays.copyOfRange(generatedData, keyLength, keyLength + ivLength);
         }

         byte[][] var12 = result;
         return var12;
      } catch (DigestException var15) {
         throw new RuntimeException(var15);
      } finally {
         Arrays.fill(generatedData, (byte)0);
      }
   }
}
